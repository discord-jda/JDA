/*
 * Copyright 2015 Austin Keener, Michael Ritter, Florian Spie√ü, and the JDA contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.dv8tion.jda.api.interactions.components

import javax.annotation.CheckReturnValue
import javax.annotation.Nonnull

/**
 * Component which supports interactions via [ComponentInteraction].
 */
interface ActionComponent : ItemComponent {
    /**
     * The component ID or null.
     * <br></br>Some components such as link buttons don't have this.
     *
     *
     * This need not be a numeric ID! All these component IDs are custom and user-provided data,
     * unlike other IDs generated by Discord. This ID is used for event handling with [ComponentInteraction.getComponentId].
     *
     * @return The component ID or null if not present
     *
     * @see ComponentInteraction.getComponentId
     */
    @JvmField
    val id: String?

    /**
     * Whether this action component is disabled.
     *
     *
     * You can use [.asDisabled] or [.asEnabled] to create enabled/disabled instances.
     *
     * @return True, if this button is disabled
     */
    @JvmField
    val isDisabled: Boolean

    /**
     * Returns a copy of this component with [.isDisabled] set to true.
     *
     * @return New disabled component instance
     */
    @Nonnull
    @CheckReturnValue
    fun asDisabled(): ActionComponent? {
        return withDisabled(true)
    }

    /**
     * Returns a copy of this component with [.isDisabled] set to false.
     *
     * @return New enabled component instance
     */
    @Nonnull
    @CheckReturnValue
    fun asEnabled(): ActionComponent? {
        return withDisabled(false)
    }

    /**
     * Returns a copy of this component with [.isDisabled] set to the provided value.
     *
     * @param  disabled
     * True, if this component should be disabled
     *
     * @throws UnsupportedOperationException
     * If this component type cannot be disabled
     *
     * @return New enabled/disabled component instance
     */
    @Nonnull
    @CheckReturnValue
    fun withDisabled(disabled: Boolean): ActionComponent?
}
